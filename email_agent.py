#!/usr/bin/env python3
"""
Email Agent - Sends stock news summaries via email.

This agent takes the news results from the News Agent and sends them
via email using the Mailgun API.
"""

import logging
import os
import requests
from datetime import datetime
from typing import List, Dict, Any
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("email_agent")

# Mailgun configuration
MAILGUN_API_KEY = os.environ.get("MAILGUN_API_KEY")
MAILGUN_DOMAIN = os.environ.get("MAILGUN_DOMAIN")

MAILGUN_API_URL = f"https://api.mailgun.net/v3/{MAILGUN_DOMAIN}/messages"
FROM_EMAIL = os.environ.get("FROM_EMAIL", f"Stock Alert <postmaster@{MAILGUN_DOMAIN}>")
TO_EMAIL = os.environ.get("TO_EMAIL", "hunyaochong@gmail.com")


def format_email_content(news_results: List[Dict[str, Any]]) -> Dict[str, str]:
    """Format the news results into an email subject and body.

    Args:
        news_results: List of dictionaries containing stock information and news summaries

    Returns:
        Dictionary with email subject and body
    """
    if not news_results:
        return {
            "subject": "Stock Alert: No significant stock movements today",
            "body": "There were no significant stock movements to report today.",
        }

    # Get current date for the subject
    current_date = datetime.now().strftime("%Y-%m-%d")

    # Create subject with count of stocks and date
    subject = f"Stock Alert: {len(news_results)} stocks with significant movement ({current_date})"

    # Start building the email body
    body = f"Stock News Summary for {current_date}\n\n"

    # Add a section for each stock
    for result in news_results:
        ticker = result.get("ticker", "Unknown")
        price_change = result.get("price_change_percent", 0)
        news_summary = result.get("news_summary", "No summary available")

        # Add a separator and stock header
        body += "=" * 80 + "\n"
        body += f"NEWS FOR {ticker} ({price_change}%)\n"
        body += "=" * 80 + "\n"
        body += f"{news_summary}\n\n"

    # Add footer
    body += (
        "\n\nThis email was automatically generated by the Stock Watchlist Alert Agent."
    )

    return {"subject": subject, "body": body}


def send_email(subject: str, body: str, to_email: str = TO_EMAIL) -> bool:
    """Send an email using the Mailgun API.

    Args:
        subject: Email subject
        body: Email body
        to_email: Recipient email address (defaults to TO_EMAIL from environment)

    Returns:
        True if the email was sent successfully, False otherwise
    """
    if not MAILGUN_API_KEY:
        logger.error("Mailgun API key is not set. Cannot send email.")
        return False

    try:
        logger.info(f"Sending email to {to_email}")

        response = requests.post(
            MAILGUN_API_URL,
            auth=("api", MAILGUN_API_KEY),
            data={"from": FROM_EMAIL, "to": to_email, "subject": subject, "text": body},
        )

        if response.status_code == 200:
            logger.info(f"Email sent successfully to {to_email}")
            return True
        else:
            logger.error(
                f"Failed to send email. Status code: {response.status_code}, Response: {response.text}"
            )
            return False

    except Exception as e:
        logger.error(f"Error sending email: {str(e)}")
        return False


def main(news_results: List[Dict[str, Any]] = None) -> bool:
    """Main function to run the Email Agent.

    Args:
        news_results: List of dictionaries containing stock information and news summaries.
                     If None, will attempt to run the News Agent to get results.

    Returns:
        True if the email was sent successfully, False otherwise
    """
    try:
        # If no news results provided, run the News Agent
        if news_results is None:
            logger.info("No news results provided. Running News Agent...")
            try:
                from news_agent import main as news_main

                news_results = news_main()
            except Exception as e:
                logger.error(f"Error running News Agent: {str(e)}")
                return False

        if not news_results:
            logger.warning("No news results to send")
            # Still send an email indicating no significant movements
            email_content = format_email_content([])
            return send_email(email_content["subject"], email_content["body"])

        # Format the email content
        email_content = format_email_content(news_results)

        # Send the email
        return send_email(email_content["subject"], email_content["body"])

    except Exception as e:
        logger.error(f"Error running Email Agent: {str(e)}")
        return False


if __name__ == "__main__":
    main()
